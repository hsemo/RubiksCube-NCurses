#ifndef __SOLVER__H
#define __SOLVER__H

class rubiks;

// #include "rubiks.h"
#include <iostream>
// #include <vector>
#include <thread>
#include <queue>
#include <deque>
#include <future>
#include <mutex>
// #include <condition_variable>

class solver{
    private:
    char solverCube[6][3][3];

    // this vector contains all the valid strings of moves
    // that is generated by the SOLVE member function
    // std::vector<std::string> solvedMoves;

    // vector of moves indxs from which cube can be solved at that time
    std::vector<int> mvindxs;

    // tester funcs threads
    std::vector<std::thread> testerThreads;

    // generators funcs threads
    // std::vector<std::thread> geneThreads;

    // // for storing strings moves
    // std::queue<std::string> mvStrngs;

    // for storing print strings
    // std::deque<std::string> prntStrngs;

    // for termination threads
    bool solutionFound;

    // shortest length for generating moves
    int length;

    // total valid moves that can be performed on a cube || E' M E M'
    const std::string totalValidMoves[27] = {"F", "B", "L", "R", "U", "D", "E", "M", "S", "F'", "B'", "L'", "R'", "U'", "D'","E'", "M'", "S'", "F2", "B2", "L2", "R2", "U2", "D2", "E2", "M2", "S2"};

    public:
    // constructor that takes a instance of class RUBIKS
    solver(rubiks&);

    // SOLVE function that solves the current cube 
    // and return the vector of strings, this vector 
    // contains strings of moves from which we can solve this cube
    // std::vector<std::string> solve(int);
    void solve(int, int);

    // generate's moves from a-t variables
    std::string generateMovesStrng(void);

    // analyse the vector of string moves and print
    // void analyseNprnt(void);

    // sets the indexes of moves in 
    void setMvIndxs(void);

    // tester for threads
    void tester(int, int);

    // printer function that prints the moves strings to the output console
    void prntr(void);

    std::promise<std::string> prom;
    std::future<std::string> fu;
    bool allClear;
    // std::mutex mu;
    // std::condition_variable tstrs, gnrtr, prntf;

};
#endif





